<---------UNSTAGING & UNMODIFYING-------->
DELETING MY PANDA AND OPEN AGAIN GIT BASH

*UNSTAGING
$ git status - no git repository
$ git init - making git repository
$ git status - untracked file
$ git add . - staging
$ git commit -m "Initial commit" - commiting
$ git status - clean 
SUPPOSE I MADE A CHANGE IN FIRST_RENAMED.TXT
$ git status - modified
$ git add first_renamed.txt - staging
$ git status - staged now commit it 
GIT GIVES A SUGGESTION HOW WE CAN UNSTAGED A STAGED FILE 
$ git restore --staged first_renamed.txt - for unsatging 
$ git status - unstaged now

*UNMODIFYING
SUPPOSE I CHANGE A DATA IN FIRST_RENAMED.TXT AND NOW I WANT IT BACK SO  
$ git status - modified 
$ git checkout -- first_renamed.txt - for getting previous data back 
$ git status - clean 
SUPPOSE I CHANGE GITIGNORE AND FIRST_RENAMED FILES
$ git status - 2 modified
$ git checkout -- first_renamed.txt -
$ git status - only 1 modified now 
SOMETIMES IT IS DANGER COMMAND BECOZ OUR NEW DATA IS IMP SO WE SHOULDCOMMIT IT BEFORE UNMODIFYING
$ git add .gitignore -
$ git status - staged file modified
$ git checkout -- .gitignore - 
$ git status - staged file modified nothing happens
NOTHING CHANGE IN GITIGNORE
$ git commit -m "commiting" - 
$ git status - clean
LETS CHANGE FEW FILES 
GITIGNORE AND FIRST_RENAMED
$ git status - modified 2 file
IF I WANT MY previous COMMITS BACK EVEN IF I CHANGE 50 FILES SO USED 
$ git checkout -f - takes back to PREVIOUS COMMITS
$ git status - clean 
ALL CHANGES HAVE BEEN LOSE NOW AND GETS OUR PREVIOUS COMMITS 
SOMETIMES THIS COMMAND IS DANGER BECOZ SOMETIMES OUR IMP CODES GET LOSE, WE CAN USE IT FOR A PRACTICING A PROJECT
